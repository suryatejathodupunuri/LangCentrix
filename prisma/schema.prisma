// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url = env("MONGODB_URI")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For credentials login
  role          String    @default("Editor")
  isActive      Boolean   @default(true)
  lastLogin     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Task {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  taskId             String  @unique              
  project            String?
  taskType           String?
  assignTo           String?
  taskLabel          String?
  priority           String?
  sourceLang         String?
  targetLang         String?
  description        String?
  expectedFinishDate DateTime?
  domain             String?
  sourceFile         String?
  secondFile         String?
  currentStatus      String?
  modifiedAt         DateTime? @updatedAt
  statusUpdatedAt    DateTime?
  currentIteration   Int?
  Delete_Flag        Boolean? @default(false)
  createdBy          String?
  createdByRole      String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model SignupRequest {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
}
model Client {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  phone     String
  address   String
  projects  ClientProject[]  @relation("ClientToProject_client")
}

model Project {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String?
  clientName   String?
  managerName  String?
  startDate    DateTime?
  endDate      DateTime?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  clients      ClientProject[]  @relation("ClientToProject_project")
}

model ClientProject {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  clientId   String   @db.ObjectId
  projectId  String   @db.ObjectId

  client     Client   @relation(fields: [clientId], references: [id], name: "ClientToProject_client")
  project    Project  @relation(fields: [projectId], references: [id], name: "ClientToProject_project")
}


